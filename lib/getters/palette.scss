/// Return a color value from the configured `palettes`
///
/// @author Kyle Oliveiro
///
/// @access public
/// @group getters
///
/// @require {function} get
///
/// @param {arglist} $color - Description of color to return
/// @return {color}
/// @example
///   @include set( palettes, (
///     grey: (
///       light : #EEEEEE,
///       null  : #D0D0D0,
///       dark  : #404040
///     ), ...
///   ) );
///
///   .element {
///     background-color: palette(light grey); // #EEEEEE
///     color: palette(dark grey);             // #404040
///
///     &:hover {
///       color: palette(grey); // palette(null grey) => #D0D0D0
///     }
///   }

@function palette($color) {
	$value: ();

	@if length($color) == 1 {
		$colors : map-get(get(palettes), inspect($color));
		$value  : map-get($colors, 'base');
	} @else {
		$palette : nth($color, 2);
		$colors  : map-get(get(palettes), inspect($palette));
		$shade   : nth($color, 1);

		// Default to base color on invalid key name
		@if not map-has-key($colors, $shade) {
			$shade: 'base';
		}

		$value: map-get($colors, $shade);
	}

	@return $value;
}
