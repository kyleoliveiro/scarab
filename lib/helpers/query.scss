// @mixin query ( $query )
//
// Include an @media query block for property declarations
//
// @param { arglist } $query - Media query descriptor

@mixin query ( $query ) {
	$condition:   ();
	$breakpoint:  ();
	$media-query: ();

	// e.g. query(small) => @media min-width(get(breakpoints, small)) {}
	@if length($query) == 1 {
		$breakpoint: $query;
		$media-query: '(min-width: #{get(breakpoints, $breakpoint)})';
	}
	
	@else if length($query) == 2 {
		$condition:  nth( $query, 1 );
		$breakpoint: nth( $query, 2 );

		// e.g. query(until medium) => @media max-width(get(breakpoints, medium)) {}
		@if $condition == 'until' {
			$media-query: '(max-width: #{get(breakpoints, $breakpoint)})';
		}
		// e.g. query(from small)   => @media min-width(get(breakpoints, small)) {}
		@else if $condition == 'from' {
			$media-query: '(min-width: #{get(breakpoints, $breakpoint)})';
		}
	}

	// e.g. query(small to medium) => @media min-width(get(breakpoints, small)) and max-width(get(breakpoints, medium)) {}
	@else if length($query) == 3 {
		$bp1: nth( $query, 1 );
		$bp2: nth( $query, 3 );
		$min-query: get(breakpoints, $bp1);
		$max-query: get(breakpoints, $bp2);

		@if get(breakpoints, $bp1) > get(breakpoints, $bp2) {
			$min-query: get(breakpoints, $bp2);
			$max-query: get(breakpoints, $bp1);
		}

		$media-query: 'all and (min-width: #{$min-query}) and (max-width: #{$max-query})';
	}

	@media #{$media-query} {
		@content;
	}
}
