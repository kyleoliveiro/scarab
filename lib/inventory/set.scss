/// Sets or updates a value of a key in the stylesheet inventory.
///
/// @group 3_inventory
///
/// @requires {variable} __SCARAB
/// @requires {function} to-string
/// @requires {function} map-stringify-keys-deep
///
/// @param {ArgList} $definition - Definition of the new value
/// 
/// @return {ArgList} - Definition of the new value
///
/// @example
///   $_: set(baseline, 1.25rem);
///   
///   $_: set(breakpoint, (
///       s  : 600px,
///       m  : 1024px,
///       l  : 1300px,
///       xl : 1600px
///    ));
///    
///   get(baseline)
///   // => 1.25rem
///   
///   get(breakpoint)
///   // => (
///   //      small  : 600px,
///   //      medium : 1024px,
///   //      large  : 1300px,
///   //      huge   : 1600px
///   //    )
///   
///   get(breakpoints, small)
///   // => 600px
///   
/// @todo Improve performance by optimizing `map-stringify-keys-deep`

@function set($definition...) {
	
	// Get a copy of the current $INVENTORY state
	$INVENTORY: map-get($__SCARAB, 'INVENTORY');

	$result: (); // key-value pair that will be merged with $INVENTORY 

	// If there are only 2 args, we can easily determine the result
	@if length($definition) == 2 {
		$key       : nth($definition, 1);
		$new-value : nth($definition, 2);

		$result: ($key: $new-value);
	}

	// For more than 2 args, we have to build the result backwards
	@if length($definition) > 2 {

		// The new value is the last arg in $definition
		$new-value: nth($definition, -1);

		// Build a list of maps preceding the new one
		$maps: ($INVENTORY,);

		@for $i from 1 through length($definition) - 2 {
			$current-map   : nth($maps, -1);
			$current-key   : nth($definition, $i);
			$current-value : map-get($current-map, to-string($current-key)) or ();

			$maps: append($maps, $current-value);
		}

		@for $i from length($maps) through 1 {
			$current-map   : nth($maps, $i);
			$current-key   : nth($definition, $i);
			$current-value : ();

			@if $i == length($maps) {
				$current-value: $new-value;
			} @else {
				$current-value: $result;
			}

			$result: map-merge($current-map, (to-string($current-key): $current-value));
		}
	}

	// Update the local $INVENTORY map
	$INVENTORY: map-merge($INVENTORY, map-stringify-keys-deep($result));

	// Merge the updated $INVENTORY map back into $__SCARAB
	$__SCARAB: map-merge($__SCARAB, ('INVENTORY': $INVENTORY)) !global;
	@return $definition;

}



/// Calls `set`
/// 
/// @group 3_inventory
/// 
/// @requires {function} set
/// 
/// @param {ArgList} $args - Args for `set`
/// 
/// @example
///   @include set(baseline, 1.25rem);
///   
///   @include set(breakpoints, (
///       s  : 600px,
///       m  : 1024px,
///       l  : 1300px,
///       xl : 1600px
///    ));
///    
///   @debug get(baseline); // 1.25rem
///   
///   @debug get(breakpoints);
///   // => (
///   //     small  : 600px,
///   //     medium : 1024px,
///   //     large  : 1300px,
///   //     huge   : 1600px
///   // )
///   
///   @debug get(breakpoints, small); // 600px

@mixin set($args...) {
	$_: set($args...);
}
