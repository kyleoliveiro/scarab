@include describe('color [func]') {

  @include it('Returns a `color` value from the `INVENTORY` map') {
    $__SCARAB: (
      'INVENTORY': (
        'color': (
          'transparent': transparent,
          'red': #ff0000,
          'blue': (
            '1': #0000ff,
            '2': #000099,
            '3': #000033,
          )
        )
      )
    ) !global;

    @include assert-equal(
      color(transparent),
      transparent,
      'Single-level color'
    );

    @include assert-equal(
      color(red),
      #ff0000,
      'Single-level color'
    );

    @include assert-equal(
      color(blue, 2),
      #000099,
      'Nested color'
    );

    @include assert-equal(
      color(blue),
      (
        '1': #0000ff,
        '2': #000099,
        '3': #000033,
      ),
      'Color map'
    );
  }

}

@include describe('palette [func]') {

  @include it('Returns a `color` value from the `INVENTORY` map') {
    $__SCARAB: (
      'INVENTORY': (
        'color': (
          'transparent': transparent,
          'red': #ff0000,
          'blue': (
            '1': #0000ff,
            '2': #000099,
            '3': #000033,
          )
        )
      )
    ) !global;

    @include assert-equal(
      palette(transparent),
      transparent,
      'Single-level color'
    );

    @include assert-equal(
      palette(red),
      #ff0000,
      'Single-level color'
    );

    @include assert-equal(
      palette(blue, 2),
      #000099,
      'Nested color'
    );

    @include assert-equal(
      palette(blue),
      (
        '1': #0000ff,
        '2': #000099,
        '3': #000033,
      ),
      'Color map'
    );
  }

}

@include describe('c [func]') {

  @include it('Returns a `color` value from the `INVENTORY` map') {
    $__SCARAB: (
      'INVENTORY': (
        'color': (
          'transparent': transparent,
          'red': #ff0000,
          'blue': (
            '1': #0000ff,
            '2': #000099,
            '3': #000033,
          )
        )
      )
    ) !global;

    @include assert-equal(
      c(transparent),
      transparent,
      'Single-level color'
    );

    @include assert-equal(
      c(red),
      #ff0000,
      'Single-level color'
    );

    @include assert-equal(
      c(blue, 2),
      #000099,
      'Nested color'
    );

    @include assert-equal(
      c(blue),
      (
        '1': #0000ff,
        '2': #000099,
        '3': #000033,
      ),
      'Color map'
    );
  }

}
