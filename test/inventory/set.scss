@include describe('set [func]') {

  @include it('Sets a new value in the `INVENTORY` map') {
    $__SCARAB: (
      'INVENTORY': ()
    ) !global;

    $_: set(baseline, 2rem);

    @include assert-equal(
      inspect($__SCARAB),
      inspect((
        'INVENTORY': (
          'baseline': 2rem
        )
      )),
      'Register value for new key'
    );



    $__SCARAB: (
      'INVENTORY': ()
    ) !global;

    $_: set(breakpoints, custom, 777px);

    @include assert-equal(
      inspect($__SCARAB),
      inspect((
        'INVENTORY': (
          'breakpoints': (
            'custom': 777px
          )
        )
      )),
      'Register value for new nested key'
    );




    $__SCARAB: (
      'INVENTORY': (
        'baseline': 2rem
      )
    ) !global;

    $_: set(baseline, 0.5rem);

    @include assert-equal(
      inspect($__SCARAB),
      inspect((
        'INVENTORY': (
          'baseline': 0.5rem
        )
      )),
      'Update value for existing key'
    );



    $__SCARAB: (
      'INVENTORY': ()
    ) !global;

    $_: set(palettes, (
      blue: (
        light: skyblue,
        base: blue,
        dark: darkblue
      )
    ));

    @include assert-equal(
      inspect($__SCARAB),
      inspect((
        'INVENTORY': (
          'palettes': (
            'blue': (
              'light': skyblue,
              'base': blue,
              'dark': darkblue
            )
          )
        )
      )),
      'Set a map-based value'
    );



    $__SCARAB: (
      'INVENTORY': ()
    ) !global;

    $_: set(palettes, blue, (
      light: skyblue,
      base: blue,
      dark: darkblue
    ));

    @include assert-equal(
      inspect($__SCARAB),
      inspect((
        'INVENTORY': (
          'palettes': (
            'blue': (
              'light': skyblue,
              'base': blue,
              'dark': darkblue
            )
          )
        )
      )),
      'Set a nested map-based value'
    );
  }

}



@include describe('set [mixin]') {

  @include it('Sets a new value in the `INVENTORY` map') {
    $__SCARAB: (
      'INVENTORY': ()
    ) !global;

    @include set(baseline, 2rem);

    @include assert-equal(
      inspect($__SCARAB),
      inspect((
        'INVENTORY': (
          'baseline': 2rem
        )
      )),
      'Register value for new key'
    );



    $__SCARAB: (
      'INVENTORY': ()
    ) !global;

    @include set(breakpoints, custom, 777px);

    @include assert-equal(
      inspect($__SCARAB),
      inspect((
        'INVENTORY': (
          'breakpoints': (
            'custom': 777px
          )
        )
      )),
      'Register value for new nested key'
    );




    $__SCARAB: (
      'INVENTORY': (
        'baseline': 2rem
      )
    ) !global;

    @include set(baseline, 0.5rem);

    @include assert-equal(
      inspect($__SCARAB),
      inspect((
        'INVENTORY': (
          'baseline': 0.5rem
        )
      )),
      'Update value for existing key'
    );



    $__SCARAB: (
      'INVENTORY': ()
    ) !global;

    @include set(palettes, (
      blue: (
        light: skyblue,
        base: blue,
        dark: darkblue
      )
    ));

    @include assert-equal(
      inspect($__SCARAB),
      inspect((
        'INVENTORY': (
          'palettes': (
            'blue': (
              'light': skyblue,
              'base': blue,
              'dark': darkblue
            )
          )
        )
      )),
      'Set a map-based value'
    );



    $__SCARAB: (
      'INVENTORY': ()
    ) !global;

    @include set(palettes, blue, (
      light: skyblue,
      base: blue,
      dark: darkblue
    ));

    @include assert-equal(
      inspect($__SCARAB),
      inspect((
        'INVENTORY': (
          'palettes': (
            'blue': (
              'light': skyblue,
              'base': blue,
              'dark': darkblue
            )
          )
        )
      )),
      'Set a nested map-based value'
    );
  }

}
