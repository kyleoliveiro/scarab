@include describe('const [func]') {

  @include it('Returns a value from the `CONSTANTS` map') {
    $__SCARAB: (
      'TOKENS': (),
      'CONSTANTS': (
        'c'           : 299792458,
        'g'           : 9.80665,
        'e'           : 2.71828182845904523536028747135266249775724709369995,
        'pi'          : 3.1415926535897932384626433832795028841971693993751,
        'phi'         : 1.6180339887498,
        'ln10'        : 2.302585092994046,
        'ln2'         : 0.6931471805599453,
        'log10e'      : 0.4342944819032518,
        'log2e'       : 1.4426950408889634,
        'sqrt1_2'     : 0.7071067811865476,
        'sqrt2'       : 1.4142135623730951,
        'min_z_index' : -2147483647,
        'max_z_index' : 2147483647,
        'sort_order'  : (
          "!" "#" "$" "%" "&" "'" "(" ")" "*" "+" "," "-" "." "/" "[" "\\" "]" "^"
          "_" "{" "|" "}" "~" "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c"
          "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u"
          "v" "w" "x" "y" "z"
        ),
        'custom' : (
          'red' : 1
        )
      )
    ) !global;


    @include assert-equal(
      const(pi),
      3.1415926535897932384626433832795028841971693993751,
      'Root-level constant'
    );

    @include assert-equal(
      const(custom, red),
      1,
      'Nested constant'
    );

    @include assert-equal(
      const(custom, 'red'),
      1,
      'Use single quoted keys'
    );

    @include assert-equal(
      const(custom, "red"),
      1,
      'Use double quoted keys'
    );
  }

}
