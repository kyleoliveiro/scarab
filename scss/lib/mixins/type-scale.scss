// Type Scale
// ----------
// Returns CSS rules for responsive font sizes.
//
// $size - { key } - A valid key from `$TYPE-SCALE`

@mixin type-scale( $size ) {

	@if not map-has-key( $TYPE-SCALE, $size ) {
		@warn 'Invalid ( $size ) passed to @mixin type-scale(): #{ $size }';
		@error 'INVALID ARGUMENT';
	}

	$_breakpoint-map: map-get( $TYPE-SCALE, $size );

	@for $i from 1 through length( $_breakpoint-map ) {
		$_breakpoint:	nth( nth( $_breakpoint-map, $i ), 1 );
		$_property-map:	nth( nth( $_breakpoint-map, $i ), 2 );

		$_properties: 	map-keys( $_property-map );
		$_values: 		map-values( $_property-map );

		@if $_breakpoint == 'base' {
			$_j: 1;
			@each $property in $_properties {
				#{$property}: nth( $_values, $_j );
				$_j: $_j + 1;
			}
		} @else {
			@include query( #{ $_breakpoint } ) {
				$_j: 1;
				@each $property in $_properties {
					#{$property}: nth( $_values, $_j );
					$_j: $_j + 1;
				}
			}
		}
	}

}
